package cote_study_java;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Scanner;

public class babbling {
	static int dupPerCount; // 중복순열 갯수

	public static void main(String[] args) {
		
		String[] babble = {"aya", "ye", "woo", "ma" };
		int res = solution(babble);

	}
	
    public static int solution(String[] babbling) {
        int answer = 0;
		
		int n = 3;
		int r = 4;
	
//		LinkedList<String> list = new LinkedList<>();
		LinkedList<Integer> list = new LinkedList<>();
		
		System.out.println("****중복순열****");
		rePermutation(list, n, r);
		list.clear();
		
        return answer;
    }
    
	//중복순열
	private static void rePermutation(LinkedList<Integer> list, int n, int r) {
		if(list.size() == r){
			for(int i : list){
				System.out.print(i+" ");
			}
			System.out.println();
			return;
		}
		for(int i=0; i<n; i++){
			list.add(i);
			rePermutation(list, n, r);
			list.removeLast();//해당 넘버를 다시 제거 (즉,뽑지 않고 다음 번호 뽑기위함)
		
		}
		
	}
//	private static LinkedList<String> rePermutation(LinkedList<String> list, int n, int r) {
//		LinkedList<String> val = new LinkedList<String>();
//		
//		if(list.size() == r){
//
//			for(String i : list){
//				val.add(i);
//			}
//			
//		} else {
//			for(int i=0; i<n; i++){
//				list.add(list.get(i));
//				rePermutation(list, n, r);
//				list.removeLast();//해당 넘버를 다시 제거 (즉,뽑지 않고 다음 번호 뽑기위함)
//			
//			}
//		}
//		return val;
//		
//	}

}
