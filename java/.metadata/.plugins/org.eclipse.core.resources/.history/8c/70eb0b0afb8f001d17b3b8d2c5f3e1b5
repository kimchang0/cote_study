package cote_study_java;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Scanner;

public class babbling {
	static LinkedList<String> Arr = new LinkedList<String>();

	public static void main(String[] args) {
		
		String[] babble = {"aya", "ye", "woo", "ma" };
		int res = solution(babble);

	}
	
    public static int solution(String[] babbling) {
        int answer = 0;
		
		LinkedList<String> list = new LinkedList<>();
		LinkedList<String> n = new LinkedList<>();
		for (String i : babbling) {
			System.out.println(i);
			n.add(i);
		}
	
		int check[] = new int[n.size()];
		
		for (int i = 1; i <= 4; i++) {
			permutation(list, check, n, i);
			list.clear();
		}

		for (String i : Arr) {
			System.out.println(i);
		}
        return answer;
    }
    
	private static void permutation(LinkedList<String> list, int[] check, LinkedList<String> n, int r) {
		LinkedList<String> val = new LinkedList<String>();
		
		if(list.size() == r){
			String str_val = "";
			for(String i : list){
				str_val += i;
			}
			Arr.add(str_val);
			return;
		} else {
			for(int i=0; i<n.size(); i++){
				if(check[i] == 0){//자기자신을 못뽑게 해야지 중복이 안됨(이미 뽑은 것은 뽑지 않도록 체크)
					check[i] = 1;//자기자신을 못뽑게 해야지 중복이 안됨
					list.add(n.get(i));
					permutation(list, check, n, r);
					list.removeLast();//해당 넘버를 다시 제거 (즉,뽑지 않고 다음 번호 뽑기위함)
					check[i] = 0;
				}
			}
		}
		

	}

}
